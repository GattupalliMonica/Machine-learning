# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wRfHpi-LrwgPo-INPeVrtokdr2BoiEp4

**Heart Disease Prediction using ANN**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from scipy import stats
from sklearn.model_selection import train_test_split
from tensorflow import keras
import tensorflow as tf
from tensorflow.keras import layers
from keras.layers import Dropout
from tensorflow import keras 
from sklearn.model_selection import cross_val_score,train_test_split,StratifiedKFold,cross_val_predict
# %matplotlib inline

dataread=pd.read_csv("heart.csv",dtype=float)
dataread_f=pd.read_csv("heart_f.csv",dtype=float)
dataread_m=pd.read_csv("heart_m.csv",dtype=float)

dataread.shape

dataread_f.shape

dataread_m.shape

dataread.head(5)

dataread_f.head(5)
dataread_f.shape

dataread_m.head(5)

dataread.describe()

dataread_f.describe()

dataread_m.describe()
dataread_m.shape

dataread.info()

dataread_f.info()

dataread_m.info()

dataread.isnull().sum()

dataread_f.isnull().sum()
dataread_f.shape

dataread_m.isnull().sum()

import missingno as mns
mns.bar(dataread)
plt.show()

"""Histogram plot for 14 attributes"""

sns.set()
p = dataread.hist(figsize = (20,20))

import missingno as mns
mns.bar(dataread_f)
plt.show()

import missingno as mns
mns.bar(dataread_m)
plt.show()

fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(dataread.corr(),cbar=False,annot=True,linewidths=.5, ax=ax)

fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(dataread_f.corr(),cbar=False,annot=True,linewidths=.5, ax=ax)

fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(dataread_m.corr(),cbar=False,annot=True,linewidths=.5, ax=ax)

dataread.var()

dataread_f.var()

dataread_m.shape

dataread_m.var()

"""**Outlier detection **"""

z = np.abs(stats.zscore(dataread))
print(z)
threshold = 3
print(np.where(z > 3))

dataread = dataread[(z < 3).all(axis=1)]

dataread.shape

dataread_f.shape

dataread_m.shape

dataread.groupby(by='sex').size()

"""**Standadizing data**"""

sc = StandardScaler()
x = sc.fit_transform(dataread.drop(['target'], axis=1))        
x.shape

y = dataread['target']
y=y.to_numpy()

dataread.shape

sc = StandardScaler()
x_f = sc.fit_transform(dataread_f.drop(['target'], axis=1))        
x_f.shape

y_f = dataread_f['target']
y_f=y_f.to_numpy()

dataread_f.shape

sc = StandardScaler()
x_m = sc.fit_transform(dataread_m.drop(['target'], axis=1))        
x_m.shape

y_m = dataread_m['target']
y_m=y_m.to_numpy()

dataread_m.shape

"""**Model Architecture -1(Whole dataset)**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=True)

model = tf.keras.Sequential([
    layers.Dense(20, activation='relu', name='layer1'),
    Dropout(0.2),
    layers.Dense(25, activation='relu', name='layer2'),
    Dropout(0.2),
    layers.Dense(30, activation='relu', name='layer3'),
    Dropout(0.5),
    #layers.Dense(35, activation='relu', name='layer4'),
    #Dropout(0.5),
    layers.Dense(10, activation='relu', name='layer4'),
    layers.Dense(1, activation='sigmoid', name='f-layer'),
])

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy'])

model.fit(x_train, y_train, batch_size = 32, epochs = 90,verbose=2)

model.summary()

scores = model.evaluate(x_test, y_test)
print("Accuracy: %.2f%%" % (scores[1]*100))

"""**Model Architecture-2(Female patients dataset)**"""

x_f_train, x_f_test, y_f_train, y_f_test = train_test_split(x_f, y_f, test_size=0.3, random_state=True)

model_f = tf.keras.Sequential([
    layers.Dense(20, activation='relu', name='layer1'),
    Dropout(0.2),
    layers.Dense(25, activation='relu', name='layer2'),
    Dropout(0.2),
    layers.Dense(30, activation='relu', name='layer3'),
    Dropout(0.5),
    
    layers.Dense(10, activation='relu', name='layer4'),
    layers.Dense(1, activation='sigmoid', name='f-layer'),
])

model_f.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy'])

model_f.fit(x_f_train, y_f_train, batch_size = 32, epochs = 90,verbose=2)

scores = model_f.evaluate(x_f_test, y_f_test)
print("Accuracy: %.2f%%" % (scores[1]*100))

"""**Model Achitecture-3 (Male patients dataset)**"""

x_m_train, x_m_test, y_m_train, y_m_test = train_test_split(x_m, y_m, test_size=0.3, random_state=True)

model_m = tf.keras.Sequential([
    layers.Dense(20, activation='relu', name='layer1'),
    Dropout(0.2),
    layers.Dense(25, activation='relu', name='layer2'),
    Dropout(0.2),
    layers.Dense(30, activation='relu', name='layer3'),
    Dropout(0.5),
    layers.Dense(10, activation='relu', name='layer5'),
    layers.Dense(1, activation='sigmoid', name='f-layer'),
])

model_m.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy'])

model_m.fit(x_m_train, y_m_train, batch_size = 32, epochs = 90,verbose=2)

scores = model_m.evaluate(x_m_test, y_m_test)
print("Accuracy: %.2f%%" % (scores[1]*100))

